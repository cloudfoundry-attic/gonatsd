// Automatically generated by MockGen. DO NOT EDIT!
// Source: gonatsd/gonatsd (interfaces: HeartbeatHelper)

package mocks

import (
	time "time"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of HeartbeatHelper interface
type MockHeartbeatHelper struct {
	ctrl     *gomock.Controller
	recorder *_MockHeartbeatHelperRecorder
}

// Recorder for MockHeartbeatHelper (not exported)
type _MockHeartbeatHelperRecorder struct {
	mock *MockHeartbeatHelper
}

func NewMockHeartbeatHelper(ctrl *gomock.Controller) *MockHeartbeatHelper {
	mock := &MockHeartbeatHelper{ctrl: ctrl}
	mock.recorder = &_MockHeartbeatHelperRecorder{mock}
	return mock
}

func (_m *MockHeartbeatHelper) EXPECT() *_MockHeartbeatHelperRecorder {
	return _m.recorder
}

func (_m *MockHeartbeatHelper) Ping() {
	_m.ctrl.Call(_m, "Ping")
}

func (_mr *_MockHeartbeatHelperRecorder) Ping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ping")
}

func (_m *MockHeartbeatHelper) Pong() {
	_m.ctrl.Call(_m, "Pong")
}

func (_mr *_MockHeartbeatHelperRecorder) Pong() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Pong")
}

func (_m *MockHeartbeatHelper) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

func (_mr *_MockHeartbeatHelperRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stop")
}

func (_m *MockHeartbeatHelper) Ticker() <-chan time.Time {
	ret := _m.ctrl.Call(_m, "Ticker")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

func (_mr *_MockHeartbeatHelperRecorder) Ticker() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ticker")
}
