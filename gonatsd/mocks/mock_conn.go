// Automatically generated by MockGen. DO NOT EDIT!
// Source: gonatsd/gonatsd (interfaces: Conn)

package mocks

import (
	gomock "code.google.com/p/gomock/gomock"
	net "net"
	gonatsd "gonatsd/gonatsd"
)

// Mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *_MockConnRecorder
}

// Recorder for MockConn (not exported)
type _MockConnRecorder struct {
	mock *MockConn
}

func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &_MockConnRecorder{mock}
	return mock
}

func (_m *MockConn) EXPECT() *_MockConnRecorder {
	return _m.recorder
}

func (_m *MockConn) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockConnRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockConn) CloseWithError(_param0 *gonatsd.NATSError) {
	_m.ctrl.Call(_m, "CloseWithError", _param0)
}

func (_mr *_MockConnRecorder) CloseWithError(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CloseWithError", arg0)
}

func (_m *MockConn) Closed() bool {
	ret := _m.ctrl.Call(_m, "Closed")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockConnRecorder) Closed() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Closed")
}

func (_m *MockConn) HeartbeatHelper() gonatsd.HeartbeatHelper {
	ret := _m.ctrl.Call(_m, "HeartbeatHelper")
	ret0, _ := ret[0].(gonatsd.HeartbeatHelper)
	return ret0
}

func (_mr *_MockConnRecorder) HeartbeatHelper() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HeartbeatHelper")
}

func (_m *MockConn) Options() *gonatsd.ConnOptions {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(*gonatsd.ConnOptions)
	return ret0
}

func (_mr *_MockConnRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Options")
}

func (_m *MockConn) Read(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}

func (_m *MockConn) ReadControlLine() (string, error) {
	ret := _m.ctrl.Call(_m, "ReadControlLine")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) ReadControlLine() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadControlLine")
}

func (_m *MockConn) RemoteAddr() net.Addr {
	ret := _m.ctrl.Call(_m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

func (_mr *_MockConnRecorder) RemoteAddr() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoteAddr")
}

func (_m *MockConn) SendServerCmd(_param0 gonatsd.ServerCmd) {
	_m.ctrl.Call(_m, "SendServerCmd", _param0)
}

func (_mr *_MockConnRecorder) SendServerCmd(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendServerCmd", arg0)
}

func (_m *MockConn) ServeCommand(_param0 gonatsd.ClientCmd) {
	_m.ctrl.Call(_m, "ServeCommand", _param0)
}

func (_mr *_MockConnRecorder) ServeCommand(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServeCommand", arg0)
}

func (_m *MockConn) ServeMessage(_param0 *gonatsd.SubscribedMessage) {
	_m.ctrl.Call(_m, "ServeMessage", _param0)
}

func (_mr *_MockConnRecorder) ServeMessage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServeMessage", arg0)
}

func (_m *MockConn) ServeRequest(_param0 gonatsd.Request) {
	_m.ctrl.Call(_m, "ServeRequest", _param0)
}

func (_mr *_MockConnRecorder) ServeRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServeRequest", arg0)
}

func (_m *MockConn) Server() gonatsd.Server {
	ret := _m.ctrl.Call(_m, "Server")
	ret0, _ := ret[0].(gonatsd.Server)
	return ret0
}

func (_mr *_MockConnRecorder) Server() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Server")
}

func (_m *MockConn) Start() {
	_m.ctrl.Call(_m, "Start")
}

func (_mr *_MockConnRecorder) Start() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start")
}

func (_m *MockConn) Subscriptions() map[int]*gonatsd.Subscription {
	ret := _m.ctrl.Call(_m, "Subscriptions")
	ret0, _ := ret[0].(map[int]*gonatsd.Subscription)
	return ret0
}

func (_mr *_MockConnRecorder) Subscriptions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subscriptions")
}

func (_m *MockConn) Write(_param0 *gonatsd.Response) {
	_m.ctrl.Call(_m, "Write", _param0)
}

func (_mr *_MockConnRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0)
}
